/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */
Node* merge(Node* l1,Node* l2)
{
	if(!l1)
		return l2;
	else if(!l2)
		return l1;
	Node* temp=new Node();
	Node* res=temp;
	Node* temp1=l1;
	Node* temp2=l2;
	while(temp1 && temp2)
	{
		if(temp1->data < temp2->data)
		{
			temp->child=temp1;
			temp=temp->child;
			temp1=temp1->child;
		}
		else
		{
			temp->child=temp2;
			temp=temp->child;
			temp2=temp2->child;
		}
	}
	if(temp1)
		temp->child=temp1;
	else if(temp2)
		temp->child=temp2;
	res->child->next=NULL;
	return res->child;
}
Node* flattenLinkedList(Node* head) 
{
	if(head->next == NULL) 
		return head;
	Node*second = flattenLinkedList(head->next);
	head->next = NULL;
	head = merge(head, second);
	return head;
}
