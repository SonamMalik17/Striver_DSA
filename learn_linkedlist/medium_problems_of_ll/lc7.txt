/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode* slow=head;
        ListNode* fast=head;
        if(head->next==NULL)
            return true;
        // finding mid
        while(fast->next!=NULL && fast->next->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }

        // reversing the right half
        ListNode* newNode=NULL;
        ListNode* curr=slow->next;
        while(curr!=NULL)
        {
            ListNode* temp=curr->next;
            curr->next=newNode;
            newNode=curr;
            curr=temp;
        }

        slow->next=newNode;

        // checking palindrome
        slow=slow->next;
        ListNode* temp1=head;
        while(slow!=NULL)
        {
            if(slow->val==temp1->val)
            {
                slow=slow->next;
                temp1=temp1->next;
            }
            else
                return false;
        }
        return true;
    }
};