/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 *		Node() : data(0), next(nullptr) {};
 *		Node(int x) : data(x), next(nullptr) {}
 *		Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node* segregateEvenOdd(Node* head)
{
    // Write your code here
    if(head->next==NULL)
        return head;
    else
    {
        Node* evenStart=NULL;
        Node* evenEnd=NULL;
        Node* oddStart=NULL;
        Node* oddEnd=NULL;
        Node* curr=head;
        while(curr!=NULL)
        {
            int val=curr->data;

            // even
            if(val%2==0)
            {
                if(evenStart==NULL)
                {
                    evenStart=curr;
                    evenEnd=curr;
                }
                else
                {
                    evenEnd->next=curr;
                    evenEnd=curr;
                }
            }

            // odd
            else
            {
                if(oddStart==NULL)
                {
                    oddStart=curr;
                    oddEnd=curr;
                }
                else
                {
                    oddEnd->next=curr;
                    oddEnd=curr;
                }
            }
            curr=curr->next;
        }
        if(oddStart==NULL || evenStart==NULL)
            return head;
        else
        {
            evenEnd->next=oddStart;
            oddEnd->next=NULL;
        }
        return evenStart;
    }
}
