// CN Solution
bool areIsomorphic(string &str1, string &str2)
{
    int n=str1.size();
    int m=str2.size();
    if(n!=m) return false;
    int t1[256]={0};
    int t2[256]={0};
    for(int i=0;i<n;i++){
        if(t1[str1[i]]==0 && t2[str2[i]]==0)
        {
            t1[str1[i]]=str2[i];
            t2[str2[i]]=str1[i];
        }
        else if(t1[str1[i]]!=str2[i] ||t2[str2[i]]!=str1[i]) return false;
    }
    return true;
}

// LC Solution
class Solution {
public:
    bool isIsomorphic(string s, string t) {
        int n=s.size();
    int m=t.size();
    if(n!=m) return false;
    int t1[256]={0};
    int t2[256]={0};
    for(int i=0;i<n;i++){
        if(t1[s[i]]==0 && t2[t[i]]==0)
        {
            t1[s[i]]=t[i];
            t2[t[i]]=s[i];
        }
        else if(t1[s[i]]!=t[i] ||t2[t[i]]!=s[i]) return false;
    }
    return true;





        // if(s.size()!=t.size())
        //     return 0;
        // int n=s.size();
        // int i;
        // unordered_map<char,int> mp1,mp2;
        // for(i=0;i<n;i++)
        // {
        //     mp1[s[i]]+=i;
        //     mp2[t[i]]+=i;
        // }
        // for(i=0;i<n;i++)
        // {
        //     if(mp1[s[i]]!=mp2[t[i]])
        //         return false;
        // }
        // return true;
    }
};
