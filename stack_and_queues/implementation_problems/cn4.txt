#include<bits/stdc++.h>
class LRUCache
{
public:
    class Node
    {
        public :
        int key;
        int value;
        Node* prev;
        Node* next;
        Node(int k,int v)
        {
            this->key=k;
            this->value=v;
            this->prev=NULL;
            this->next=NULL;
        }
    };
    Node* head=new Node(-1,-1);
    Node* tail=new Node(-1,-1);
    void insertNode(Node* newnode) {
        Node* temp = head->next;
        newnode->next = temp;
        newnode->prev = head;
        head->next = newnode;
        temp->prev = newnode;
    }
    void deleteNode(Node* delnode) {
        Node* delprev = delnode->prev;
        Node* delnext = delnode->next;
        delprev->next = delnext;
        delnext->prev = delprev;
    }
    unordered_map<int,Node*> mp;
    int cap;
    LRUCache(int capacity) {
        cap=capacity;
        head->next=tail;
        tail->prev=head;
    }
    
    int get(int key) {
        if(!(mp.find(key)==mp.end()))
        {
            Node* resNode=mp[key];
            int val=resNode->value;
            deleteNode(resNode);
            insertNode(resNode);
            mp[key]=head->next;
            return val;
        } 
        return -1;
    }

    void put(int key, int value) {
        if(!(mp.find(key)==mp.end()))
        {
            Node* existing=mp[key];
            deleteNode(existing);
        }
        else if(!(mp.size()<cap))
        {
            mp.erase(tail->prev->key);
            deleteNode(tail->prev);
        }
        insertNode(new Node(key,value));
        mp[key]=head->next;
    }
};
