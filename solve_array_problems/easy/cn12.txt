#include<bits/stdc++.h>
int getSingleElement(vector<int> &arr){
	int i;
	for(i=1;i<arr.size();i=i+2)
	{
		if(arr[i-1] == arr[i])continue;
		else break;
	}	
	
	return arr[i-1];



	// Write your code here.
	// int n=arr.size();
	// int i,ans;
	// unordered_map<int,int> mp;
	// for(i=0;i<n;i++)
	// 	mp[arr[i]]++;
	// for(auto it:mp)
	// {
	// 	if(it.second==1)
	// 	{
	// 		ans=it.first;
	// 		break;
	// 	}
	// }
	// return ans;





	// Better : TC : O(3N), SC : O(max(arr)+1)
	// int n=arr.size();
	// int maxe=*max_element(arr.begin(), arr.end());
	// int hash[maxe+1]={0};
	// int i,ans;
	// for(i=0;i<n;i++)
	// 	hash[arr[i]]++;
	// for(i=0;i<n;i++)
	// {
    //       if (hash[arr[i]] == 1) {
    //         ans = arr[i];
    //         break;
    //       }
    //     }
	// return ans;





	// 	Brute Force : TC : O(N*N), SC : O(1)
	// int i,j;
	// int n=arr.size();
	// int cnt=0;
	// int ans;
	// for(i=0;i<n;i++)
	// {
	// 	int cnt=0;
	// 	for(j=0;j<n;j++)
	// 	{
	// 		if(arr[i]==arr[j])
	// 			++cnt;
	// 	}
	// 	if(cnt==1)
	// 	{
	// 		ans=arr[i];
	// 		break;
	// 	}
	// }
	// return ans;





	// Optimal : TC : O(N), SC : O(1)
	// int n=arr.size();
	// int res=0;
	// for(int i=0;i<n;i++)
	// 	res=res^arr[i];
	// return res;
}