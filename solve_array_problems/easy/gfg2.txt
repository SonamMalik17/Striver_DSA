class Solution{
public:	
	// Function returns the second
	// largest elements
	int print2largest(int a[], int n) {
	    
	    
	   //Second smallest : TC-> O(N)
	   int min1=INT_MAX;
	   int min2=INT_MAX;
	   int i;
	   for(i=1;i<n;i++)
	   {
	       if(a[i]<min1)
	       {
	           min2=min1;
	           min1=a[i];
	       }
	       else if(a[i]>min1 && a[i]<min2)
	           min2=a[i];
	   }
	   return min2;
	    
	    
	    
	    
	    
	   // Second largest
	   // Optimal Solution : TC-> O(N)
	   int max1=a[0];
	   int max2=-1;
	   int i;
	   for(i=1;i<n;i++)
	   {
	       if(a[i]>max1)
	       {
	           max2=max1;
	           max1=a[i];
	       }
	       else if(a[i]<max1 && a[i]>max2)
	           max2=a[i];
	   }
	   return max2;
	    
	    
	   // Better Solution : TC-> O(2N)
	   // int i;
    //     int max=a[0];
    //     for(i=0;i<n;i++)
    //     {
    //         if(a[i]>max)
    //             max=a[i];
    //     }
    //     int max2=-1;
	   // for(i=0;i<n;i++)
    //     {
    //         if(a[i]>max2 && a[i]!=max)
    //             max2=a[i];
    //     }
	   // return max2;
	    
	    
	    
	    
	   // Brute Force Solution : TC-> O(N+NlogN)
	   // sort(a,a+n);
	   // int max2=a[n-1];
	   // int i;
	   // for(i=n-2;i>=0;i--)
	   // {
	   //     if(a[i]!=max2)
	   //     {
	   //         max2=a[i];
	   //         break;
	   //     }
	   // }
	   // if(i==-1)
	   // return i;
	   // return max2;
    }
};