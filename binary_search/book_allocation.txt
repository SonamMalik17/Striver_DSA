// GFG Solution
class Solution 
{
    public:
    //Function to find minimum number of pages.
    int students(int a[],int n,int j)
    {
        int st_cnt=1;
        long long int pages=0;
        for(int i=0;i<n;i++)
        {
            if((pages+a[i])>j)
            {
                ++st_cnt;
                pages=a[i];
            }
            else
                pages+=a[i];
        }
        return st_cnt;
    }
    long long int sumi(int a[],int n)
    {
        long long int sum=0;
        for(int i=0;i<n;i++)
            sum+=a[i];
        return sum;
    }
    long long int maxi(int a[],int n)
    {
        long long int max=a[0];
        for(int i=1;i<n;i++)
        {
            if(a[i]>max)
                max=a[i];
        }
        return max;
    }
    int findPages(int a[], int n, int m) 
    {
        //code here
        if(m>n) 
            return -1;
        long long int low=maxi(a,n);
        long long int high=sumi(a,n);
        while(low<=high)
        {
            int mid=((low+high)/2);
            int st=students(a,n,mid);
            if(st>m)
                low=mid+1;
            else
                high=mid-1;
        }
        return low;
    }
};

// Coding Ninjas/Studio Solution
int students(vector<int>& a,int n,int j)
{
    int st_cnt=1;
    int pages=0;
    for(int i=0;i<n;i++)
    {
        if((pages+a[i])>j)
        {
            ++st_cnt;
            pages=a[i];
        }
        else
            pages+=a[i];
    }
    return st_cnt;
}
int sumi(vector<int>& a,int n)
{
    int sum=0;
    for(int i=0;i<n;i++)
        sum+=a[i];
    return sum;
}
int findPages(vector<int>& a, int n, int m) {
    // Write your code here.
    if(m>n) 
        return -1;
    int low=*max_element(a.begin(),a.end());
    int high=sumi(a,n);
    while(low<=high)
    {
        int mid=((low+high)/2);
        int st=students(a,n,mid);
        if(st>m)
            low=mid+1;
        else
            high=mid-1;
    }
    return low;
}