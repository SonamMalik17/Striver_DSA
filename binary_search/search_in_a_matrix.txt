// GFG Solution
class Solution{
public:	
	int matSearch (vector <vector <int>> &mat, int N, int M, int X)
	{
		int i=0;
		int j=M-1;
		while(i<N && j>=0)
		{
			if(mat[i][j]==X)
				return 1;
			else if(mat[i][j]>X)
				--j;
			else
				++i;
		}
		return 0;
	    
	    
	    
	   // for(int i=0;i<N;i++)
	   // {
	   //     int low=0;
	   //     int high=M-1;
	   //     while(low<=high)
	   //     {
	   //         int mid=(low + ((high-low)/2));
	   //         if(mat[i][mid]==X)
	   //             return 1;
	   //         else if(mat[i][mid]>X)
	   //             high=mid-1;
	   //         else
	   //             low=mid+1;
	   //     }
	   // }
	   // return 0;
	    
	    
	    
	    
	    // your code here
	   // for(int i=0;i<N;i++)
	   // {
	   //     for(int j=0;j<M;j++)
	   //     {
	   //         if(mat[i][j]==X)
	   //             return 1;
	   //     }
	   // }
	   // return 0;
	}
};

// LC Solution
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& mat, int X) {
			int m=mat.size();
			int n=mat[0].size();
			int low=0;
			int high=((m*n)-1);
			while(low<=high)
			{
					int mid=(low+((high-low)/2));
					int i=mid/n;
					int j=mid%n;
					if(mat[i][j]==X)
							return true;
					else if(mat[i][j]>X)
							high=mid-1;
					else
							low=mid+1;
			}
			return false;





			// for(int i=0;i<mat.size();i++)
			// {
			// 		for(int j=0;j<mat[i].size();j++)
			// 		{
			// 				if(mat[i][j]==X)
			// 						return true;
			// 		}
			// }
			// return false;




    }
};