// GFG Solution
class Solution {
public:
    bool possible(vector<int> &stalls,int j,int cows)
    {
        int n=stalls.size();
        int last=stalls[0];
        int cowCnt=1;
        for(int i=1;i<n;i++)
        {
            if((stalls[i]-last)>=j)
            {
                ++cowCnt;
                last=stalls[i];
            }
            if(cowCnt==cows)
                return true;
        }
        return false;
    }
    int solve(int n, int k, vector<int> &stalls) {
    
        // Write your code here
        sort(stalls.begin(),stalls.end());
        int low=1;
        int high=stalls[n-1]-stalls[0];
        while(low<=high)
        {
            int mid=(low+((high-low)/2));
            if(possible(stalls,mid,k))
                low=mid+1;
            else
                high=mid-1;
        }
        return high;
    }
};

// Sphere Online Judge Solution 
#include <bits/stdc++.h>
using namespace std;
class Solution {
public:
    bool possible(vector<int> &stalls,int j,int cows)
    {
        int n=stalls.size();
        int last=stalls[0];
        int cowCnt=1;
        for(int i=1;i<n;i++)
        {
            if((stalls[i]-last)>=j)
            {
                ++cowCnt;
                last=stalls[i];
            }
            if(cowCnt==cows)
                return true;
        }
        return false;
    }
    int solve(int n, int k, vector<int> &stalls) {
    
        // Write your code here
        sort(stalls.begin(),stalls.end());
        int low=1;
        int high=stalls[n-1]-stalls[0];
        while(low<=high)
        {
            int mid=(low+((high-low)/2));
            if(possible(stalls,mid,k))
                low=mid+1;
            else
                high=mid-1;
        }
        return high;
    }
};
int main() {
    int t = 1;
    cin >> t;
    // freopen ("output_gfg.txt", "w", stdout);
    while (t--) {
        // Input
        int n, k;
        cin >> n >> k;
        vector<int> stalls(n);
        for (int i = 0; i < n; i++) {
            cin >> stalls[i];
        }
        // char ch;
        // cin >> ch;
        Solution obj;
        cout << obj.solve(n, k, stalls) << endl;
        // cout << "~\n";
    }
    // fclose(stdout);
    return 0;
}
