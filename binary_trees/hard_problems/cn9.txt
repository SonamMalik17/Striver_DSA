/************************************************************

    Following is the TreeNode<int> class structure

    template <typename T>
    class TreeNode<int> {
       public:
        T data;
        TreeNode<int><T> *left;
        TreeNode<int><T> *right;

        TreeNode<int>(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
TreeNode<int>* building(vector<int>& preorder,int preStart,int preEnd,vector<int>&  inorder,int inStart,int inEnd,map<int,int>& inMap)
{
    if(preStart>preEnd || inStart>inEnd)
        return NULL;
    TreeNode<int>* root=new TreeNode<int>(preorder[preStart]);
    int inRoot=inMap[root->data];
    int numsLeft=inRoot-inStart;
    root->left=building(preorder,preStart+1,preStart+numsLeft,inorder,inStart,inRoot-1,inMap);
    root->right=building(preorder,preStart+numsLeft+1,preEnd,inorder,inRoot+1,inEnd,inMap);
    return root;
}
TreeNode<int> *buildBinaryTree(vector<int> &inorder, vector<int> &preorder)
{
	//    Write your code here
    map<int,int> inMap;
    for(int i=0;i<inorder.size();i++)
        inMap[inorder[i]]=i;
    TreeNode<int>* root=building(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1,inMap);
    return root;
}